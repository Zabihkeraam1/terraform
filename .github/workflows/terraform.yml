# name: Terraform Plan, Apply, and Configure Instance

# on:
#   push:
#     branches:
#       - master

# jobs:
#   terraform:
#     name: Terraform
#     runs-on: ubuntu-latest

#     steps:
#       # Check out the repository
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Set up Terraform
#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.0  # Use the latest stable version

#       # Initialize Terraform
#       - name: Terraform Init
#         id: init
#         run: terraform init

#       # Destroy existing resources (if any)
#       - name: Terraform Destroy (if needed)
#         id: destroy
#         run: terraform destroy -auto-approve
#         env:
#           TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       # Run Terraform Plan
#       - name: Terraform Plan
#         id: plan
#         run: terraform plan
#         env:
#           TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       # Run Terraform Apply (if Plan succeeds)
#       - name: Terraform Apply
#         if: success()
#         run: terraform apply -auto-approve
#         env:
#           TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
#       - name: Debug Terraform Output
#         run: terraform output instance_public_ip

#       # Get the public IP of the instance from Terraform output
#       - name: Get Instance Public IP
#         id: get_ip
#         run: echo "PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

#       # Debug PUBLIC_IP
#       - name: Debug PUBLIC_IP
#         run: echo "Public IP ${{ env.PUBLIC_IP }}"
        
#       # Wait for instance to initialize
#       - name: Wait for Instance to Initialize
#         run: sleep 60  # Wait for 60 seconds

#       # Debug Network Connectivity
#       - name: Debug Network Connectivity
#         run: |
#           nc -zv google.com 80
#           ping ${{ env.PUBLIC_IP }}
      
#       # Update /etc/hosts
#       - name: Update /etc/hosts
#         run: |
#           sudo bash -c 'echo "${{ env.PUBLIC_IP }} ec2-instance" >> /etc/hosts'
    
#       # # Generate an SSH key pair
#       # - name: Generate SSH Key Pair
#       #   id: generate_ssh_key
#       #   run: |
#       #     ssh-keygen -t rsa -b 4096 -C "github-actions" -f id_rsa -N ""
#       #     echo PRIVATE_KEY=$(cat id_rsa) >> $GITHUB_ENV
#       #     echo PUBLIC_KEY=$(cat id_rsa.pub) >> $GITHUB_ENV

#       # Generate an SSH key pair
#       - name: Generate SSH Key Pair
#         id: generate_ssh_key
#         run: |
#           ssh-keygen -t rsa -b 4096 -C "github-actions" -f id_rsa -N ""
#           PRIVATE_KEY=$(base64 -w 0 id_rsa)
#           PUBLIC_KEY=$(cat id_rsa.pub)
#           echo "PRIVATE_KEY=${PRIVATE_KEY}" >> $GITHUB_ENV
#           echo "PUBLIC_KEY=${PUBLIC_KEY}" >> $GITHUB_ENV

#       # Add the public key to the instance
#       - name: Add Public Key to Instance
#         run: |
#           mkdir -p ~/.ssh
#           chmod 700 ~/.ssh
#           ssh-keyscan ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts
#           echo "${{ env.PUBLIC_KEY }}" | ssh -i id_rsa ubuntu@${{ env.PUBLIC_IP }} "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys"

#       # Install Ansible
#       - name: Install Ansible
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y ansible

#       # Copy Ansible playbook and inventory to the runner
#       - name: Prepare Ansible files
#         run: |
#           mkdir -p ansible
#           cp ./ansible-playbook.yml ./ansible/
#           echo "[webservers]" > ./ansible/hosts
#           echo "${{ env.PUBLIC_IP }}" >> ./ansible/hosts

#       # Run Ansible playbook to configure the instance
#       - name: Run Ansible Playbook
#         run: |
#           cd ansible
#           ansible-playbook -i hosts ansible-playbook.yml --user ubuntu --private-key ../id_rsa

#       # Securely delete the private key
#       - name: Securely Delete Private Key
#         run: |
#           shred -u id_rsa id_rsa.pub


name: Terraform Plan, Apply, and Configure Instance

on:
  push:
    branches:
      - master

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Use the latest stable version

      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # Run Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Run Terraform Apply (if Plan succeeds)
      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Debug Terraform Output
        run: terraform output instance_public_ip

      - name: Debug Terraform Output
        run: terraform output private_key

      # Capture Terraform Outputs
      - name: Get Terraform Outputs
        id: get_outputs
        run: |
          PUBLIC_IP=$(terraform output -raw instance_public_ip)
          PRIVATE_KEY=$(terraform output -raw private_key)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "PRIVATE_KEY=$PRIVATE_KEY" >> $GITHUB_ENV

      - name: Debug GITHUB_ENV
        run: cat $GITHUB_ENV

      # Debug Outputs
      - name: Debug Outputs
        run: |
          echo "Public IP: ${{ env.PUBLIC_IP }}"
          echo "Private Key: ${{ env.PRIVATE_KEY }}"

  configure:
    name: Configure Instance
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Save the private key to a file
      - name: Save Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Install Ansible
      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      # Copy Ansible playbook and inventory to the runner
      - name: Prepare Ansible files
        run: |
          mkdir -p ansible
          cp ./ansible-playbook.yml ./ansible/
          echo "[webservers]" > ./ansible/hosts
          echo "${{ env.PUBLIC_IP }}" >> ./ansible/hosts

      # Run Ansible playbook to configure the instance
      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook -i hosts ansible-playbook.yml --user ubuntu --private-key ~/.ssh/id_rsa

      # Securely delete the private key
      - name: Securely Delete Private Key
        if: always()
        run: |
          shred -u ~/.ssh/id_rsa