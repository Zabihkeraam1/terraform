name: Terraform Plan, Apply, and Configure Instance

on:
  push:
    branches:
      - master

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Save Terraform Outputs to File
        run: |
          terraform output -raw instance_public_ip
          terraform output -raw private_key
          echo "$(terraform output -raw instance_public_ip | awk -F '::' '{print $1}')" > public_ip.txt
          echo "$(terraform output -raw private_key)" > private_key.txt

      - name: Debug Files
        run: |
          ls -l
          echo "Contents of public_ip.txt:"
          cat public_ip.txt
          echo "Contents of private_key.txt:"
          cat private_key.txt

      - name: Upload Terraform Outputs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: |
            public_ip.txt
            private_key.txt

  configure:
    name: Configure Instance
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Terraform Outputs Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: ./terraform-outputs

      - name: Save Private Key
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "$(cat ./terraform-outputs/private_key.txt)" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Private key saved to ~/.ssh/id_rsa"
          ls -l ~/.ssh   # Debug: Show the contents of the ~/.ssh directory
          cat ~/.ssh/id_rsa 

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          echo "Ansible installed"
          ansible --version  # Debug: Show the installed Ansible version

      - name: Prepare Ansible files
        run: |
          mkdir -p ansible
          cp ./ansible-playbook.yml ./ansible/
          printf "[servers]\n$(cat ./terraform-outputs/public_ip.txt) ansible_ssh_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa\n" > ./ansible/inventory.ini
          echo "Ansible files prepared"
          ls -l ./ansible   # Debug: Show the contents of the ansible directory
          cat ./ansible/inventory.ini   # Debug: Show the contents of the hosts file

      - name: Debug Ansible Inventory File
        run: |
          echo "Contents of Ansible inventory.ini:"
          cat ./ansible/inventory.ini

      - name: Debug PUBLIC_IP
        run: |
          echo "Public IP: $(cat ./terraform-outputs/public_ip.txt)"
          echo "Private key: $(cat ./terraform-outputs/private_key.txt)"

      - name: Run Ansible Playbook
        run: |
          cd ansible
          echo "Current directory: $(pwd)"
          ls -l 
          ansible-playbook -i inventory.ini ansible-playbook.yml --user ubuntu --private-key ~/.ssh/id_rsa

      - name: Securely Delete Private Key
        if: always()
        run: |
          shred -u ~/.ssh/id_rsa