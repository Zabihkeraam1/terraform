
# - name: Configure server with Docker, Nginx, and GitHub Actions runner
#   hosts: all
#   become: yes
#   vars:
#     ansible_user: "ubuntu"
#     docker_buildx_version: "v0.10.0"
#     github_runner_version: "2.309.0"
#     github_repo_url: "https://github.com/Zabihkeraam1/terraform"
#     github_runner_token: "{{ github_token }}"
#     runner_name: "my-runner"
#     nginx_conf_path: "/etc/nginx/conf.d/test.conf"
#     actions_runner_dir: "/home/ubuntu/actions-runner"

#   tasks:
#     - name: Update apt cache
#       apt:
#         update_cache: yes

#     - name: Install Docker and Nginx
#       apt:
#         name:
#           - docker.io
#           - nginx
#         state: present

#     - name: Start and enable Docker service
#       service:
#         name: docker
#         state: started
#         enabled: yes

#     - name: Add current user to the Docker group
#       user:
#         name: "{{ ansible_user }}"
#         groups: docker
#         append: yes

#     - name: Fix Docker socket permissions
#       file:
#         path: /var/run/docker.sock
#         mode: '0660'
#         owner: root
#         group: docker

#     - name: Ensure Docker CLI plugins directory exists
#       file:
#         path: "/home/{{ ansible_user }}/.docker/cli-plugins"
#         state: directory
#         mode: '0755'
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"

#     - name: Install Docker Buildx
#       ansible.builtin.get_url:
#         url: "https://github.com/docker/buildx/releases/download/{{ docker_buildx_version }}/buildx-{{ docker_buildx_version }}.linux-amd64"
#         dest: "/home/{{ ansible_user }}/.docker/cli-plugins/docker-buildx"
#         mode: '0755'


#     - name: Restart Docker service
#       service:
#         name: docker
#         state: restarted

#     - name: Start and enable Nginx service
#       service:
#         name: nginx
#         state: started
#         enabled: yes

#     - name: Ensure Nginx conf.d directory exists
#       file:
#         path: /etc/nginx/conf.d
#         state: directory

#     - name: Fetch public IP
#       shell: curl -s http://checkip.amazonaws.com
#       register: public_ip
#       changed_when: false

#     - name: Create Nginx configuration file
#       copy:
#         dest: "{{ nginx_conf_path }}"
#         content: |
#           server {
#               listen 80;

#               server_name {{ public_ip.stdout }};
#               location / {
#                   proxy_pass http://localhost:5173;
#                   proxy_set_header Host \$host;
#                   proxy_set_header X-Real-IP \$remote_addr;
#                   proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#                   proxy_set_header X-Forwarded-Proto \$scheme;
#               }
#           }

#     - name: Test Nginx configuration
#       command: nginx -t
#       register: nginx_test
#       changed_when: false

#     - name: Fail if Nginx configuration test fails
#       fail:
#         msg: "Nginx configuration test failed"
#       when: nginx_test.rc != 0

#     - name: Reload Nginx
#       service:
#         name: nginx
#         state: reloaded

#     - name: Remove a folder and all its contents
#       file:
#         path: ./actions-runner
#         state: absent

#     - name: Create GitHub Actions runner directory
#       file:
#         path: "{{ actions_runner_dir }}"
#         state: directory
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"

#     - name: Download GitHub Actions runner
#       ansible.builtin.get_url:
#         url: "https://github.com/actions/runner/releases/download/v{{ github_runner_version }}/actions-runner-linux-x64-{{ github_runner_version }}.tar.gz"
#         dest: "{{ actions_runner_dir }}/actions-runner-linux-x64-{{ github_runner_version }}.tar.gz"

#     - name: Extract GitHub Actions runner
#       unarchive:
#         src: "{{ actions_runner_dir }}/actions-runner-linux-x64-{{ github_runner_version }}.tar.gz"
#         dest: "{{ actions_runner_dir }}"
#         remote_src: yes
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"

#     - name: Fix permissions for GitHub Actions runner
#       file:
#         path: "{{ actions_runner_dir }}"
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"
#         recurse: yes

#     - name: Configure GitHub Actions runner
#       command: >
#         ./config.sh --url {{ github_repo_url }} --token {{ github_runner_token }} --name "{{ runner_name }}" --unattended
#       args:
#         chdir: "{{ actions_runner_dir }}"
#       become_user: "{{ ansible_user }}"

#     - name: Remove existing GitHub Actions runner if configured
#       command: ./config.sh remove
#       args:
#         chdir: "{{ actions_runner_dir }}"
#       when: ansible_facts.packages['actions-runner'] is defined

#     - name: Start GitHub Actions runner
#       command: ./run.sh
#       args:
#         chdir: "{{ actions_runner_dir }}"
#       become_user: "{{ ansible_user }}"
#       async: 600
#       poll: 0

#     - name: Debugging - Print success message
#       debug:
#         msg: "GitHub Actions runner setup completed successfully!"


- name: Configure server with Docker, Nginx, and GitHub Actions runner
  hosts: all
  become: yes
  vars:
    ansible_user: "ubuntu"
    docker_buildx_version: "v0.10.0"
    github_runner_version: "2.309.0"
    github_repo_url: "https://github.com/Zabihkeraam1/terraform"
    github_runner_token: "{{ github_token }}"
    runner_name: "my-runner"
    nginx_conf_path: "/etc/nginx/conf.d/test.conf"
    actions_runner_dir: "/home/ubuntu/actions-runner"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker and Nginx
      apt:
        name:
          - docker.io
          - nginx
        state: present

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to the Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Fix Docker socket permissions
      file:
        path: /var/run/docker.sock
        mode: '0660'
        owner: root
        group: docker

    - name: Ensure Docker CLI plugins directory exists
      file:
        path: "/home/{{ ansible_user }}/.docker/cli-plugins"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Check if Docker Buildx is already installed
      stat:
        path: "/home/{{ ansible_user }}/.docker/cli-plugins/docker-buildx"
      register: docker_buildx_installed

    - name: Install Docker Buildx
      ansible.builtin.get_url:
        url: "https://github.com/docker/buildx/releases/download/{{ docker_buildx_version }}/buildx-{{ docker_buildx_version }}.linux-amd64"
        dest: "/home/{{ ansible_user }}/.docker/cli-plugins/docker-buildx"
        mode: '0755'
      when: not docker_buildx_installed.stat.exists

    - name: Restart Docker service
      service:
        name: docker
        state: restarted

    - name: Start and enable Nginx service
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Ensure Nginx conf.d directory exists
      file:
        path: /etc/nginx/conf.d
        state: directory

    - name: Fetch public IP
      shell: curl -s http://checkip.amazonaws.com
      register: public_ip
      changed_when: false
      ignore_errors: yes  # Continue if curl fails

    - name: Create Nginx configuration file
      copy:
        dest: "{{ nginx_conf_path }}"
        content: |
          server {
              listen 80;

              server_name {{ public_ip.stdout | default(ansible_default_ipv4.address) }};
              location / {
                  proxy_pass http://localhost:5173;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      changed_when: false

    - name: Fail if Nginx configuration test fails
      fail:
        msg: "Nginx configuration test failed"
      when: nginx_test.rc != 0

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Remove existing GitHub Actions runner directory
      file:
        path: "{{ actions_runner_dir }}"
        state: absent

    - name: Create GitHub Actions runner directory
      file:
        path: "{{ actions_runner_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Download GitHub Actions runner
      ansible.builtin.get_url:
        url: "https://github.com/actions/runner/releases/download/v{{ github_runner_version }}/actions-runner-linux-x64-{{ github_runner_version }}.tar.gz"
        dest: "{{ actions_runner_dir }}/actions-runner-linux-x64-{{ github_runner_version }}.tar.gz"

    - name: Extract GitHub Actions runner
      unarchive:
        src: "{{ actions_runner_dir }}/actions-runner-linux-x64-{{ github_runner_version }}.tar.gz"
        dest: "{{ actions_runner_dir }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Fix permissions for GitHub Actions runner
      file:
        path: "{{ actions_runner_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes

    - name: Remove existing GitHub Actions runner configuration
      command: ./config.sh remove
      args:
        chdir: "{{ actions_runner_dir }}"
      become_user: "{{ ansible_user }}"
      ignore_errors: yes  # Ignore errors if the runner is not configured

    - name: Configure GitHub Actions runner
      command: >
        ./config.sh --url {{ github_repo_url }} --token {{ github_runner_token }} --name "{{ runner_name }}" --unattended
      args:
        chdir: "{{ actions_runner_dir }}"
      become_user: "{{ ansible_user }}"

    - name: Start GitHub Actions runner
      command: ./run.sh
      args:
        chdir: "{{ actions_runner_dir }}"
      become_user: "{{ ansible_user }}"
      async: 600
      poll: 0

    - name: Debugging - Print success message
      debug:
        msg: "GitHub Actions runner setup completed successfully!"